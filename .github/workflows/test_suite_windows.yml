name: Windows build

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  schedule:
    - cron:  '0 23 * * *'
  push:
    tags:
      - nightly_*
      - R20*

defaults:
  run:
    shell: msys2 {0}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  webots-build:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test webots build') }}
    strategy:
      matrix:
        os: [windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: false
        install: >-
          git
    - uses: actions/checkout@v3
      with:
         submodules: true
         fetch-depth: 15
    - name: Install Webots Compilation Dependencies
      run: |
        echo 'export PATH=$GITHUB_WORKSPACE/msys64/mingw64/bin:$GITHUB_WORKSPACE/bin/node:/mingw64/bin:/usr/bin:$PATH' >> ~/.bash_profile
        export WEBOTS_HOME=$GITHUB_WORKSPACE
        ./scripts/install/msys64_installer.sh --all
    - name: Build Webots
      run: |
        export WEBOTS_HOME=$GITHUB_WORKSPACE
        make webots_target -j4
  build:
    if: ${{ github.event_name == 'push' || github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'test distribution') || contains(github.event.pull_request.labels.*.name, 'test suite') }}
    strategy:
      matrix:
        os: [windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: false
        install: >-
          git
          openssh
    - uses: actions/checkout@v3
      with:
         submodules: true
         fetch-depth: 15
    - name: Install Visual Studio 10 and OpenJDK 18
      shell: powershell
      run: |
        choco install -y openjdk --version=18.0.2
        choco install -y visualcpp-build-tools
    - name: Install Webots Compilation Dependencies
      run: |
        export PYTHON_INSTALLATION_FOLDER=/C/hostedtoolcache/windows/Python/
        export PYTHON37_REVISION=`ls $PYTHON_INSTALLATION_FOLDER | grep '^3\.7\.[0-9]\+$' | cut -c5- | sort -n | tail -n1`
        export PYTHON38_REVISION=`ls $PYTHON_INSTALLATION_FOLDER | grep '^3\.8\.[0-9]\+$' | cut -c5- | sort -n | tail -n1`
        export PYTHON39_REVISION=`ls $PYTHON_INSTALLATION_FOLDER | grep '^3\.9\.[0-9]\+$' | cut -c5- | sort -n | tail -n1`
        export PYTHON310_REVISION=`ls $PYTHON_INSTALLATION_FOLDER | grep '^3\.10\.[0-9]\+$' | cut -c6- | sort -n | tail -n1`
        echo 'export JAVA_HOME=/C/Program\ Files/OpenJDK/`ls /C/Program\ Files/OpenJDK`' >> ~/.bash_profile
        echo 'export PYTHON37_HOME='$PYTHON_INSTALLATION_FOLDER'3.7.'$PYTHON37_REVISION'/x64' >> ~/.bash_profile
        echo 'export PYTHON38_HOME='$PYTHON_INSTALLATION_FOLDER'3.8.'$PYTHON38_REVISION'/x64' >> ~/.bash_profile
        echo 'export PYTHON39_HOME='$PYTHON_INSTALLATION_FOLDER'3.9.'$PYTHON39_REVISION'/x64' >> ~/.bash_profile
        echo 'export PYTHON310_HOME='$PYTHON_INSTALLATION_FOLDER'3.10.'$PYTHON310_REVISION'/x64' >> ~/.bash_profile
        echo 'export VISUAL_STUDIO_PATH="/C/Program Files (x86)/Microsoft Visual Studio/2017"' >> ~/.bash_profile
        echo 'export INNO_SETUP_HOME="/C/Program Files (x86)/Inno Setup 6"' >> ~/.bash_profile
        echo 'export PATH=$PYTHON38_HOME:$PYTHON38_HOME/Scripts:$GITHUB_WORKSPACE/msys64/mingw64/bin:$GITHUB_WORKSPACE/bin/node:/mingw64/bin:/usr/bin:$JAVA_HOME/bin:$PATH' >> ~/.bash_profile
        export WEBOTS_HOME=$GITHUB_WORKSPACE
        ./scripts/install/msys64_installer.sh --all
    - name: Set Commit SHA in Version
      if: ${{ github.event_name == 'schedule' }}
      run: python scripts/packaging/set_commit_and_date_in_version.py $(git log -1 --format='%H')
    - name: Webots Package Creation
      run: |
        export WEBOTS_HOME=$GITHUB_WORKSPACE
        make distrib -j4
    - name: Deploy Webots Controller
      if: ${{ github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'deploy libcontroller') }}
      run: |
        export SSH_AUTH_SOCK=/tmp/ssh_agent.sock
        mkdir ~/.ssh
        ssh-keyscan -H github.com > ~/.ssh/known_hosts
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ secrets.WEBOTS_CONTROLLER_DEPLOY_KEY }}"
        scripts/packaging/sync_controller_lib.sh
    - name: Create/Update GitHub release
      if: ${{ (github.event_name == 'push' || github.event_name == 'schedule') }}
      run: |
        python -m pip install requests PyGithub
        scripts/packaging/publish_release.py --key=${{ secrets.GITHUB_TOKEN }} --repo=${{ github.repository }} --branch=${{ github.ref }} --commit=$(git log -1 --format='%H') --tag=${{ github.ref }}
    - uses: actions/upload-artifact@v2
      if: ${{ contains(github.event.pull_request.labels.*.name, 'test distribution') || contains(github.event.pull_request.labels.*.name, 'test suite') }}
      with:
        name: build-${{ matrix.os }}
        path: |
          distribution/*.exe
    - uses: actions/upload-artifact@v2
      if: ${{ !contains(github.event.pull_request.labels.*.name, 'test suite') }}
      with:
        name: build-${{ matrix.os }}
        path: |
          distribution/*.exe
  test-suite:
    needs: build
    if: ${{ contains(github.event.pull_request.labels.*.name, 'test suite') || github.event_name == 'schedule' }}
    strategy:
      matrix:
        os: [windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: false
    - uses: actions/checkout@v2
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-${{ matrix.os }}
        path: artifact
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    #- name: Configure
    #  run: cmake -Bbuild -T host=x64 -A x64
    #- name: Build
    #  run: cmake --build build --config Debug -j4
    #- name: Install 7zip
    #  shell: powershell
    #  run: choco install 7zip
    #- name: Download Mesa
    #  shell: cmd
    #  run: |
    #    curl.exe -L --output mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/22.2.2/mesa3d-22.2.2-release-msvc.7z
    #    "C:\Program Files\7-Zip\7z.exe" x mesa.7z
    #- name: Install Mesa
    #  shell: cmd
    #  run: |
    #    del "opengl32.dll" >nul 2>&1
    #    del "libglapi.dll" >nul 2>&1
    #    mklink opengl32.dll "x64\opengl32.dll"
    #    mklink libglapi.dll "x64\libglapi.dll"
    - uses: ssciwr/setup-mesa-dist-win@v1
      with:
        version: '22.2.2'
        build-type: 'release-msvc'
        # deployment-choice: '1'
    - name: Test Suite
      run: |
        cd artifact/
        cmd.exe //c webots-R2022b-rev1_setup.exe //VERYSILENT //SUPPRESSMSGBOXES //DIR="." //SP //CURRENTUSER
        ./msys64/mingw64/bin/webotsw.exe --version
        ./msys64/mingw64/bin/webotsw.exe --sysinfo
        export WEBOTS_HOME=$PWD
        export LIBGL_ALWAYS_SOFTWARE=true
        export WEBOTS_DISABLE_SAVE_SCREEN_PERSPECTIVE_ON_CLOSE=true
        export PYTHON_INSTALLATION_FOLDER=/C/hostedtoolcache/windows/Python/
        export PYTHON38_REVISION=`ls $PYTHON_INSTALLATION_FOLDER | grep '^3\.8\.[0-9]\+$' | cut -c5- | sort -n | tail -n1`
        export PYTHON38_HOME=$PYTHON_INSTALLATION_FOLDER'3.8.'$PYTHON38_REVISION'/x64'
        export PATH=$PYTHON38_HOME:$PYTHON38_HOME/Scripts:$GITHUB_WORKSPACE/msys64/mingw64/bin:$GITHUB_WORKSPACE/bin/node:/mingw64/bin:/usr/bin:$PATH
        cd ..
        ./scripts/install/msys64_installer.sh --all
        echo 'Running Test Suite'
        python scripts/packaging/update_urls.py $(git log -1 --format='%H')
        export TESTS_HOME=$PWD # required by cache group in the test suite
        export BRANCH_HASH=$(git log -1 --format='%H')
        python tests/test_suite.py
  delete-artifacts:
    needs: [build, test-suite]
    if: ${{ always() && !contains(github.event.pull_request.labels.*.name, 'test distribution') && !contains(github.event.pull_request.labels.*.name, 'test webots build') }}
    strategy:
      matrix:
        os: [windows-2019]
    runs-on: ubuntu-latest
    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v1
      with:
        name: build-${{ matrix.os }}
